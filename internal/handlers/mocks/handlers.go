// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HandlersInterface is an autogenerated mock type for the HandlersInterface type
type HandlersInterface struct {
	mock.Mock
}

type HandlersInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlersInterface) EXPECT() *HandlersInterface_Expecter {
	return &HandlersInterface_Expecter{mock: &_m.Mock}
}

// GetInternal provides a mock function with given fields: w, r
func (_m *HandlersInterface) GetInternal(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// HandlersInterface_GetInternal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInternal'
type HandlersInterface_GetInternal_Call struct {
	*mock.Call
}

// GetInternal is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *HandlersInterface_Expecter) GetInternal(w interface{}, r interface{}) *HandlersInterface_GetInternal_Call {
	return &HandlersInterface_GetInternal_Call{Call: _e.mock.On("GetInternal", w, r)}
}

func (_c *HandlersInterface_GetInternal_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *HandlersInterface_GetInternal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *HandlersInterface_GetInternal_Call) Return() *HandlersInterface_GetInternal_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlersInterface_GetInternal_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *HandlersInterface_GetInternal_Call {
	_c.Call.Return(run)
	return _c
}

// InitRoutes provides a mock function with given fields: router
func (_m *HandlersInterface) InitRoutes(router *http.ServeMux) http.Handler {
	ret := _m.Called(router)

	if len(ret) == 0 {
		panic("no return value specified for InitRoutes")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(*http.ServeMux) http.Handler); ok {
		r0 = rf(router)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// HandlersInterface_InitRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitRoutes'
type HandlersInterface_InitRoutes_Call struct {
	*mock.Call
}

// InitRoutes is a helper method to define mock.On call
//   - router *http.ServeMux
func (_e *HandlersInterface_Expecter) InitRoutes(router interface{}) *HandlersInterface_InitRoutes_Call {
	return &HandlersInterface_InitRoutes_Call{Call: _e.mock.On("InitRoutes", router)}
}

func (_c *HandlersInterface_InitRoutes_Call) Run(run func(router *http.ServeMux)) *HandlersInterface_InitRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.ServeMux))
	})
	return _c
}

func (_c *HandlersInterface_InitRoutes_Call) Return(_a0 http.Handler) *HandlersInterface_InitRoutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlersInterface_InitRoutes_Call) RunAndReturn(run func(*http.ServeMux) http.Handler) *HandlersInterface_InitRoutes_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandlersInterface creates a new instance of HandlersInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlersInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlersInterface {
	mock := &HandlersInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
